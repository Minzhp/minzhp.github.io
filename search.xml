<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>USART、I2C、SPI、CAN总结</title>
    <url>/2018/09/11/blog/USART%E3%80%81I2C%E3%80%81SPI%E3%80%81CAN%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>USART、I2C、SPI、CAN属于嵌入式、硬件、单片机等开发时经常用到的通信协议，找工作面试也经常很容易问到，这里整理总结一下。</p>
<h3 id="USART"><a href="#USART" class="headerlink" title="USART"></a>USART</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>USART即通用同步&#x2F;异步收发器（Universal Synchronous&#x2F;Asynchronous Receiver&#x2F;Transmitter），它是嵌入式领域中使用十分广泛的一种串行通信协议，大部分MCU都具备USART硬件接口，或者仅UART（即不具备同步功能）。</p>
<h4 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h4><p>USART协议是由RS-232协议发展而来的。在个人计算机诞生之前就已经存在了串口设备，如电传打字机，工控测量设备，通信调制解调器，最初的串口就是用一根线直连另外一方，一方发一方收，后来厂商为了完善自己的串口又增加了一根线用于做信号位，主要用于判断流是否可用，同时当时的厂商们的设备不同，芯片的工作频率也不同以及电平信号也不同，导致厂商的设备只能跟自己通讯，没有一个统一的标准非常混乱，后来由无线电制造商协会（Radio Manufacturers’ Association：RMA，现美国电子工业协会（EIA））联合贝尔实验室在19世纪70年代一起制定了一个标准，即历史上第一个通用串口协议标准：RS-232，采用DB25针串口，支持异步。</p>
<p>后来随着个人电脑的出现，个人电脑最初的上的接口较小，PCB板子空间也很小，DB25较大，EIA将其中保留的一些针位去除了，形成了后来的DB9针串口，协议依然是RS-232。</p>
<p>由于DB9接口只定义了信号量，但是没有定义与每个引脚的直接关系，导致当时的厂商需要自己去定义每个引脚的作用，这就导致了不同厂商每个引脚的作用不一样，但是功能是一样的，无法相互接在一起，最初有一个比较知名的公司：IBM，它规定了一种定义，后来大多数厂商为了统一都采用IBM的定义。</p>
<p>在这一刻UART才叫UART，这里的U即是通用的意思，不同厂商之间的设备可以通过串口进行通讯了。</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>USART是一种全双工同步串行通信（UART为异步通信），点对点通信，常见波特率包括9600和115200，通常使用两根线即可进行通信，分别为Tx和Rx，与主端的发送接口和接受接口对应。</p>
<h4 id="电平标准"><a href="#电平标准" class="headerlink" title="电平标准"></a>电平标准</h4><p>USART常见不同电平标准包括TTL、RS232、RS485、RS422，其电平区别如下：</p>
<table>
<thead>
<tr>
<th align="center">标准</th>
<th align="left">电平（发送端）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">RS232</td>
<td align="left">逻辑1：-3V ~ -15V <br> 逻辑0：+3V ~ +15V</td>
</tr>
<tr>
<td align="center">TTL</td>
<td align="left">逻辑1：2.4V ~ 5V <br> 逻辑0：0V ~ 0.5V</td>
</tr>
<tr>
<td align="center">RS485</td>
<td align="left">(AB线电压差) <br> 逻辑1：+2V ~ +6V <br> 逻辑0：-2V ~ -6V</td>
</tr>
<tr>
<td align="center">RS422</td>
<td align="left">同RS485</td>
</tr>
</tbody></table>
<h4 id="传输过程"><a href="#传输过程" class="headerlink" title="传输过程"></a>传输过程</h4><p>USART（UART）通信中，每个字节都装载在一个数据帧（10或11位）里，每个数据帧都由起始位、数据位和停止位组成。</p>
<p>起始位标志一个数据帧的开始，固定为低电平。空闲状态为高电平，起始位产生下降沿，来告诉设备要开始发送数据了</p>
<p>数据位有8位或9位，数据位9位是多了一个奇偶校验位，跟在有效载荷（一个字节）后面，1为高电平，0为低电平，低位先行。奇偶校验可以判断数据传输是否出错，如果出错可选择丢弃或者重传。可选择三种方式，无校验、奇校验、偶校验。奇校验，包括校验位在内的9个数据位会出现奇数个1，根据8位数据情况奇校验位补0或1，保证1的个数位奇数，接收方接收数据时，会验证数据位和校验位，检出率不高比如有两位同时出错，只校验奇偶特性是检验不出的。偶校验同理，只能保证一定检出率。如果要更高检出率可以使用CRC校验。</p>
<p>停止位用于数据帧间隔，固定为高电平。也是为下一个起始位做准备（切换到高电平空闲状态）。</p>
<h3 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>I2C即集成电路总线（Inter-Integrated Circuit），是由Philips半导体公司（现在的NXP半导体公司）在八十年代初设计出来的一种简单、双向、二线制总线标准。多用于主机和从机在数据量不大且传输距离短的场合下的主从通信。</p>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>I2C是一种半双工同步串行通信。I2C通信由主机启动总线，并产生时钟用于传送数据，此时任何接收数据的器件均被认为是从机。总线上可以连接多个IIC通讯设备，支持多个通信主机及多个通信从机。连接到相同总线的设备数量受到总线的最大电容400pF限制。</p>
<p>一个I2C总线只使用两条总线线路，一条双向串行数据线(SDA)，一条串行时钟线(SCL)。数据线即用来表示数据，时钟线用于数据收发同步。每个连接到总线的设备都有一个独立的地址，主机可以利用这个地址进行不同设备之间的访问。</p>
<p>总线通过上拉电阻接到电源。当I2C设备空闲时，会输出高阻态，而当所有设备都空闲，都输出高阻态时，由上拉电阻把总线拉成高电平。I2C将SCL处于高时SDA拉低的动作作为开始信号，SCL处于高时SDA拉高的动作作为结束信号；传输数据时，SDA在SCL低电平时改变数据，在SCL高电平时保持数据，每个SCL脉冲的高电平传递1位数据。多个主机同时使用总线时，为了防止数据冲突，会利用仲裁方式决定由哪个设备占用总线。</p>
<p>I2C具有三种传输模式：标准模式为100kbit&#x2F;s，快速模式为400kbit&#x2F;s，高速模式下可达3.4Mbit&#x2F;s，但目前大多I2C设备尚不支持高速模式。</p>
<h4 id="传输过程-1"><a href="#传输过程-1" class="headerlink" title="传输过程"></a>传输过程</h4><p>I2C的协议定义了传输的起始和停止信号、数据有效性、响应、仲裁、时钟同步和地址广播等环节。</p>
<p>在I2C器件开始通信（传输数据）之前，串行时钟线SCL和串行数据线SDA线由于上拉的原因处于高电平状态，此时I2C总线处于空闲状态。如果主机想开始传输数据，只需在SCL为高电平时将SDA线拉低，产生一个起始信号，从机检测到起始信号后，准备接收数据，当数据传输完成，主机只需产生一个停止信号，告诉从机数据传输结束，停止信号的产生是在SCL为高电平时，SDA从低电平跳变到高电平，从机检测到停止信号后，停止接收数据。I2C整体时序如下图。起始信号之前为空闲状态，起始信号之后到停止信号之前的这一段为数据传输状态，主机可以向从机写数据，也可以读取从机输出的数据，数据的传输由双向数据线（SDA）完成。停止信号产生后，总线再次处于空闲状态。</p>
<p>在起始信号之后，主机开始发送传输的数据；在串行时钟线SCL为低电平状态时，SDA允许改变传输的数据位（1为高电平，0为低电平），在SCL为高电平状态时，SDA要求保持稳定，相当于一个时钟周期传输1位数据，经过8个时钟周期后，传输了8位数据，即一个字节。第8个时钟周期末，主机释放SDA以使从机应答，在第9个时钟周期，从机将SDA拉低以应答；如果第9个时钟周期，SCL为高电平时，SDA未被检测到为低电，视为非应答，表明此次数据传输失败。第9个时钟周期末，从机释放SDA以使主机继续传输数据，如果主机发送停止信号，此次传输结束。我们要注意的是数据以8位即一个字节为单位串行发出，其最先发送的是字节的最高位。</p>
<p>每个I2C器件都有一个器件地址，有些I2C器件的器件地址是固定的，而有些I2C器件的器件地址由一个固定部分和一个可编程的部分构成。当主机想给某个器件发送数据时，只需向总线上发送接收器件的器件地址即可。进行数据传输时，主机首先向总线上发出开始信号，对应开始位S，然后按照从高到低的位序发送器件地址，一般为7位，第8位为读写控制位R&#x2F;W，该位为0时表示主机对从机进行写操作，当该位为1时表示主机对从机进行读操作，然后接收从机响应。</p>
<p>发送完第一个字节（7位器件地址和一位读写控制位）并收到从机正确的应答后就开始发送字地址（Word Address）。一般而言，每个兼容I2C协议的器件，内部总会有可供读写的寄存器或存储器，例如EEPROM存储器，内部就是一系列顺序编址的存储单元。所以当我们对一个器件中的存储单元（包括寄存器）进行读写时，首先要指定存储单元的地址即字地址，然后再向该地址写入内容。该地址为一个或两个字节长度，具体长度由器件内部的存储单元的数量决定，当存储单元数量不超过一个字节所能表示的最大数量（2^8&#x3D;256）时，用一个字节表示，超过一个字节所能表示的最大数量时，就需要用两个字节来表示，例如同是EEPROM存储器，AT24C02的存储单元容量为2Kbit&#x3D;256Byte（一般bit缩写为b，Byte缩写为B），用一个字节地址即可寻址所有的存储单元，而AT24C64的存储单元容量为64Kb&#x3D;8KB，需要13位（2^13&#x3D;8KB）的地址位，而I2C又是以字节为单位进行传输的，所以需要用两个字节地址来寻址整个存储单元。</p>
<p>主机发送完字地址，从机正确应答后就把内部的存储单元地址指针指向该单元。如果读写控制位R&#x2F;W位为“0”即写命令，从机就处于接收数据的状态，此时，主机就开始写数据了。写数据分为单次写（对于EEPROM而言，称为字节写）和连续写（对于EEPROM而言，称为页写），两者的区别在于发送完一字节数据后，是发送结束信号还是继续发送下一字节数据，如果发送的是结束信号，就称为单次写，如果继续发送下一字节数据，就称为连续写。要注意的是，对于EEPROM的页写，是不能发送超过一页的单元容量的数据的，当写完一页的最后一个单元时，地址指针指向该页的开头，如果再写入数据，就会覆盖该页的起始数据。</p>
<p>如果读写控制位R&#x2F;W位为“1”即读命令，主机就处于接收数据的状态，从机从该地址单元输出数据。读数据有三种方式：当前地址读、随机读和连续读。当前地址读是指在一次读或写操作后发起读操作。由于I2C器件在读写操作后，其内部的地址指针自动加一，因此当前地址读可以读取下一个字地址的数据。也就是说上次读或写操作的单元地址为02时，当前地址读的内容就是地址03处的单元数据。</p>
<p>由于当前地址读极不方便读取任意的地址单元的数据，所以就有了随机读，随机读的时序有点奇怪，发送完器件地址和字地址后，竟然又发送起始信号和器件地址，而且第一次发送器件地址时后面的读写控制位为“0”，也就是写命令，第二次发送器件地址时后面的读写控制位为“1”，也就是读。为什么会有这样奇怪的操作呢？这是因为我们需要使从机内的存储单元地址指针指向我们想要读取的存储单元地址处，所以首先发送了一次Dummy Write也就是虚写操作，之所以称为虚写，是因为我们并不是真的要写数据，而是通过这种虚写操作使地址指针指向虚写操作中字地址的位置，等从机应答后，就可以以当前地址读的方式读数据了，因此随机地址读是没有发送数据的单次写操作和当前地址读操作的结合体。</p>
<p>至于连续读，对应的是当前地址读和随机读都是一次读取一个字节而言的，它是将当前地址读或随机读的主机非应答改成应答，表示继续读取数据。</p>
<h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>SPI即串行外设接口（Serial Peripheral Interface）的缩写，是美国摩托罗拉公司（Motorola）在20世纪80年代中期开发推出的一种同步串行传输规范，SPI主要应用于EEPROM、FLASH、ADC、DAC等芯片，还有数字信号处理器和数字信号解码器之间的于短距离高速通信。</p>
<h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><p>SPI是一种全双工同步通信。SPI有主、从两种模式，通常由一个主机和一个或多个从机组成（SPI不支持多主机），主机选择一个从机进行同步通信，从而完成数据的交换。提供时钟的为主机（Master），接收时钟的为从机（Slave），SPI接口的读写操作，都是由主设备发起，当存在多个从设备时，通过各自的片选信号进行管理。</p>
<p>SPI通信需要至少4根线，单向传输时3根线（如果从机设备允许的话，可直接将CS&#x2F;SS线固定在低电平），它们是MISO（主设备数据输入）、MOSI（主设备数据输出）、SCLK（时钟）和CS&#x2F;SS（片选）：</p>
<p>SPI通信中有4种不同的操作模式，不同的从机设备可能在出厂时就被设置好了某种模式，并且无法更改。但是SPI通信必须处于同一种模式下才能进行。因此我们应该对自己手里的SPI主机设备进行模式的配置，也就是通过CPOL(时钟极性)和CPHA(时钟相位)来控制SPI主设备的通信模式，具体如下：</p>
<p>时钟极性(CPOL)定义了SCLK时钟线空闲状态时的电平：</p>
<ol>
<li>CPOL&#x3D;0，即SCLK&#x3D;0，表示SCLK时钟信号线在空闲状态时的电平为低电平，因此有效状态为高电平。</li>
<li>CPOL&#x3D;1，即SCLK&#x3D;1，表示SCLK时钟信号线在空闲状态时的电平为高电平，因此有效状态为低电平。</li>
</ol>
<p>时钟相位(CPHA)定义了数据位相对于时钟线的时序(即相位)：</p>
<ol>
<li>CPHA&#x3D;0，即表示输出(out)端在上一个时钟周期的后沿改变数据，而输入(in)端在时钟周期的前沿(或不久之后)捕获数据。输出端保持数据有效直到当前时钟周期的尾部边缘。对于第一个时钟周期来说，第一位的数据必须在时钟前沿之前出现在MOSI线上。也就是一个CPHA&#x3D;0的周期包括半个时钟空闲和半个时钟置位的周期。</li>
<li>CPHA&#x3D;1，即表示输出(out)端在当前时钟周期的前沿改变数据，而输入(in)端在时钟周期的后沿(或不久之后)捕获数据。输出端保持数据有效直到下一个时钟周期的前沿。对于最后一个时钟周期来说，从机设备在片选信号消失之前保持MISO信号线有效。也就是一个CHPA&#x3D;1的周期包括半个时钟置位和半个时钟空闲的周期。</li>
</ol>
<p>此处的前沿和后沿的意思表示在每个周期中第一个出现的边沿和最后一个出现的边沿。总的来说则为：当时钟为正向时钟时，时钟线的上升沿为前沿，时钟的下降沿为后沿；当时钟为反向时钟时，时钟线的下降沿为前沿，时钟的上升沿为后沿。</p>
<h4 id="传输过程-2"><a href="#传输过程-2" class="headerlink" title="传输过程"></a>传输过程</h4><p>在SPI通信中，SPI主机设备以从机设备支持的频率通过SCLK线给到SPI从机设备，这点也意味着从机是无法主动向主机发送数据的，只能主机轮询向从机发或者从机设备主动通过一个IO口来告知主机数据到达。</p>
<p>在SPI每个时钟周期内，都会进行一次全双工数据的传输。主机通过MOSI线上发送1bit时，从机也会在读取到之后通过MISO线发送1bit数据出去。这说明，即使只进行单工通信，也会保持此通信顺序。</p>
<p>SPI传输通常涉及到两个给定了字长的移位寄存器。例如在主机、从机中的8bit的移位寄存器。它们以虚拟环形拓扑连接，数据通常先从最高有效位被移出。在时钟沿，主机和从机都移出1bit数据从传输线上给到对方。在下一个时钟边沿来到时，双方的接收器再对传输线上的该bit进行采样，并将其设置为移位寄存器的新的最低有效位。在寄存器位被移出和移入后，主机和从机交换了寄存器值。如果需要交换更多数据，则重新加载移位寄存器并重复该过程。传输可以持续任意数量的时钟周期。完成后，主机停止切换时钟信号。</p>
<p>SPI通信流程如下：</p>
<ol>
<li>SPI主机首先先将SS或CS线拉低，以此来告知SPI从机通信开始。</li>
<li>主机通过发送SCLK时钟信号，来告知从机即将进行的读写操作。这里的SCLK时钟信号是由SPI的模式来决定是高电平还是低电平有效的，这点在稍后会进行介绍。</li>
<li>主机(Master)将要发送的数据写到发送数据缓存区(Memory)，缓存区经过移位寄存器(0~7)，串行移位寄存器通过MOSI信号线将字节一位一位地移出去传送给从机，同时MISO接口接收到的数据经过移位寄存器一位一位地移到接收缓存区。</li>
<li>从机(Slave)也将自己的串行移位寄存器(0~7)中的内容通过MISO信号线返回给主机。同时通过MOSI信号线接收主机发送的数据，这样，两个移位寄存器中的内容就被交换。</li>
</ol>
<h3 id="CAN"><a href="#CAN" class="headerlink" title="CAN"></a>CAN</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>CAN即控制器局域网总线（CAN，Controller Area Network），一种用于实时应用的串行通讯协议总线，它可以使用双绞线来传输信号，是世界上应用最广泛的现场总线之一。CAN协议用于汽车中各种不同元件之间的通信，以此取代昂贵而笨重的配电线束。该协议的健壮性使其用途延伸到其他自动化和工业应用。</p>
<h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><p>CAN通过两条通信线（双绞线）产生的电压差传输数据，一个CAN网络里的所有节点都挂在这两条通信线上，使用差分信号半双工通信。</p>
<p>CAN使用称为CANH&#x2F;CANL的通信线路执行传输和接收。电位差较小的电信号称为隐性(Recessive)信号，其逻辑值为1。电位差较大的电信号称为显性（Dominant）信号，其逻辑值0。如果通信总线上发生显性和隐性(Recessive)冲突，则显性（Dominant）优先。总线空闲时保持隐性。</p>
<p>CAN总线的物理层逻辑电平，分为高速ISO11898标准（125kbps ~ 1Mbps）和低速ISO11519标准（10kbps ~ 125kbps），我们现在通常使用的CAN2.0，都是使用高速CAN标准，其物理层电平如下：</p>
<ol>
<li>CAN_H-CAN_L &lt; 0.5V 时候为隐性的，逻辑信号表现为”逻辑1”。</li>
<li>CAN_H-CAN_L &gt; 0.9V 时候为显性的，逻辑信号表现为”逻辑0”。</li>
</ol>
<p>关于CAN通信的电平传输，一个重要概念就是，CAN总线在电平传输上，具有仲裁判断逻辑，优先级为：显性（逻辑0）&gt;隐形（逻辑1）。在理解CAN总线传输的整个过程中，主要就是清楚这一规则在传输时的灵活运用，并定义的各种帧形式。</p>
<h4 id="传输过程-3"><a href="#传输过程-3" class="headerlink" title="传输过程"></a>传输过程</h4><p>CAN的数据定义了有5种帧类型：</p>
<table>
<thead>
<tr>
<th align="center">帧</th>
<th align="left">帧用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数据帧</td>
<td align="left">用于节点向外发送数据</td>
</tr>
<tr>
<td align="center">远程帧</td>
<td align="left">用于向远端节点请求数据</td>
</tr>
<tr>
<td align="center">错误帧</td>
<td align="left">用于向远端节点通知校验错误，请求重新发送上一个数据</td>
</tr>
<tr>
<td align="center">过载帧</td>
<td align="left">用于通知远端节点，本节点尚未做好准备</td>
</tr>
<tr>
<td align="center">帧间隔</td>
<td align="left">用于将数据帧和远程帧与其他的帧分隔开来</td>
</tr>
</tbody></table>
<p>其中，远程帧也常被称为远程帧。CAN的应用开发者只能使用“数据帧”和“远程帧”，其他的3种帧类型是由CAN的底层固件自动帮我们在特定场景下进行收发，开发者无需担心也无法直接参与控制。</p>
<p>不管是Classic CAN标准帧还是CANFD标准帧，其帧结构都由以下7个段组成：帧起始（SOF）、仲裁段（arbitration field）、控制段（control field）、数据段（data field）、CRC段（CRC field）、ACK段（ACK field）、帧结束（EOF）。</p>
<p>这7个段，每个段里又都有自己的格式细分，有两种格式：标准格式和扩展格式。对于仲裁段和控制段在标准帧与扩展帧里有不同的定义，其他段一致。CAN的应用开发者只使用其中的仲裁段、控制段和数据段。其他部分都由CAN底层固件自动封装。</p>
<p>帧起始由一个显性位（低电平）组成，发送节点发送帧起始，其他节点同步于帧起始；帧结束由7个隐形位（高电平）组成。</p>
<p>帧起始后是仲裁段，仲裁段决定了CAN通信的仲裁机制。只要总线空闲，总线上任何节点都可以发送报文，如果有两个或两个以上的节点开始传送报文，那么就会存在总线访问冲突的可能。但是CAN使用了标识符的逐位仲裁方法可以解决这个问题。帧ID越小，优先级越高。CAN总线控制器在发送数据的同时监控总线电平，如果电平不同，则停止发送并做其他处理。如果该位位于仲裁段，则退出总线竞争；如果位于其他段，则产生错误事件。</p>
<p>标准格式的仲裁段包括10位的帧ID和RTR位，其中RTR位用于指示这包数据是远程帧还是数据帧，数据帧的RTR位为显性电平，远程帧为隐性电平。所以帧格式和帧ID相同的情况下，数据帧优先于远程帧。而扩展格式的仲裁段包括10位的帧ID、SRR位、IDE位、18位的扩展帧ID和RTR位。其中SRR位替代远程帧请求位，为隐形；IDE位用于指示这包数据是标准帧还是扩展帧，标准帧的IDE位为显性电平，扩展帧的IDE位为隐形电平，对于前11位ID相同的标准帧（RTR为显性的远程帧）和扩展帧，标准帧优先级比扩展帧高。。可以看到，在标准格式里，仲裁段没有IDE位，其实这个位在标准格式里是放在控制段的第一位的，这样就正好可以和扩展格式的IDE位对应上进行仲裁了。</p>
<p>仲裁段之后紧跟控制段，控制段共6位，标准帧的控制段由IDE、保留位r0和数据长度代码DLC组成；扩展帧控制段则由保留位r1、r0和DLC组成。</p>
<ul>
<li>保留位（r0、r1）：保留位必须全部以显性电平发送。</li>
<li>数据长度码（DLC）：数据的字节数必须为0～8字节。数据帧的DLC表示的就是当前包数据段所带的字节数，遥控帧的DLC表示的是请求返回的数据长度。</li>
</ul>
<p>在标准格式里，IDE位放到了控制段的第一位，对应前文仲裁段的内容，可以使标准格式与扩展格式进行仲裁了。</p>
<p>之后是数据段，一个数据帧传输的数据量为0~8个字节。遥控帧的数据段长度固定为0。</p>
<p>后面是CRC段和ACK段，CAN使用CRC校验进行数据检错，CRC校验值存放于CRC段。CRC校验段由15位CRC值和1位CRC界定符构成。ACK段用于当一个接收节点接收的帧起始到CRC段之间的内容没发生错误时，它将在ACK段发送一个显性电平</p>
<p>CAN数据在收发上除了会遵循以上数据格式定义之外，还有一个“位填充”的底层规则（类似通信协议里的“转义符”），这个操作是在CAN的底层固件中自动判断执行的，其目的是为了增强数据正确性，以便识别错误信号。<br>为防止突发错误而设定，CAN协议中规定，当相同极性的电平持续五位时，则添加一个极性相反的位。填充位的添加和删除是由发送节点和接收节点完成的，CAN总线只负责传输，不会操纵信号。</p>
<ul>
<li>对于发送节点而言：在发送数据帧和遥控帧时，对于SOF~CRC(除去CRC界定符)之间的位流，相同极性的电平如果持续5位，那么在下一个位插入一个与之前5位反型的电平；</li>
<li>对于接收节点而言：在接收数据帧和遥控帧时，对于SOF~CRC(除去CRC界定符)之间的位流，相同极性的电平如果持续5位，那么需要删除下一位再接收。如果这个第6个位的电平与前5位相同，将被视为错误并发送位填充错误帧。</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] 17岁boy想当攻城狮. UART工作原理详解<br><a href="https://blog.csdn.net/bjbz_cxy/article/details/120020250">https://blog.csdn.net/bjbz_cxy/article/details/120020250</a><br>[2] 一个人一支队伍. 基础通信协议之IIC详细讲解<br><a href="https://zhuanlan.zhihu.com/p/556505577">https://zhuanlan.zhihu.com/p/556505577</a><br>[3] 亿佰特物联网应用. SPI通信协议详解，一篇就够！<br><a href="https://baijiahao.baidu.com/s?id=1746087964061209214&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1746087964061209214&amp;wfr=spider&amp;for=pc</a><br>[4] 不脱发的程序猿. 一文搞懂SPI通信协议<br><a href="https://zhuanlan.zhihu.com/p/503777954">https://zhuanlan.zhihu.com/p/503777954</a><br>[5] EXyang. CAN通信讲解<br><a href="https://zhuanlan.zhihu.com/p/538834760">https://zhuanlan.zhihu.com/p/538834760</a><br>[6] 百度百科. CAN总线协议<br><a href="https://baike.baidu.com/item/CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/1789683">https://baike.baidu.com/item/CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/1789683</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>USART</tag>
        <tag>I2C</tag>
        <tag>SPI</tag>
        <tag>CAN</tag>
      </tags>
  </entry>
  <entry>
    <title>8路指示灯读出8路拨动开关的状态</title>
    <url>/2020/04/05/note/8%E8%B7%AF%E6%8C%87%E7%A4%BA%E7%81%AF%E8%AF%BB%E5%87%BA8%E8%B7%AF%E6%8B%A8%E5%8A%A8%E5%BC%80%E5%85%B3%E7%9A%84%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p style="display:none">
1. 试验描述<br>利用PB端口的8路拨动开关控制PD端口相应的8路LED指示灯亮灭。从而理解单片机中数和位的概念以及数据传递的概念。
</p>



	<div class="row">
    <embed src="/note_pdf/8路指示灯读出8路拨动开关的状态.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>AVR</tag>
        <tag>Proteus</tag>
      </tags>
  </entry>
  <entry>
    <title>x(t)=1的傅里叶变换</title>
    <url>/2019/07/15/blog/x(t)=1%E7%9A%84%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[

对于$f(t)$，其傅里叶变换$F(j \omega)$为
$$
\begin{equation}
f(t) \longleftrightarrow F(j \omega) = \int_{-\infty}^{+\infty} f(t) e^{-j \omega t} dt
\end{equation}
$$

令$x(t)=e^{-\alpha\left| t \right|},\alpha>0$，则其傅里叶变换为

$$
\begin{align} 
X(j\omega) 
& =\int_{-\infty}^{+\infty}e^{-\alpha\left| t \right|}e^{-j\omega t}dt \\[0.45cm]
& = \int_{-\infty}^{0}e^{(\alpha-j\omega)t}dt+ \int_{0}^{+\infty}e^{-(\alpha+j\omega)t}dt \\[0.45cm]
& =\frac{1}{\alpha-j\omega}e^{(\alpha-j\omega)t}\bigg|_{-\infty}^{0}+\frac{1}{\alpha+j\omega}e^{-(\alpha+j\omega)t}\bigg|_{+\infty}^{0} \\[0.45cm]
& =\frac{1}{\alpha-j\omega}+\frac{1}{\alpha+j\omega} \\[0.45cm]
& =\frac{2\alpha}{\alpha^2+\omega^2} \\[0.45cm]
\end{align}  
$$

由于$\lim_{\alpha \rightarrow 0}{e^{-\alpha \left| t \right|}}=1$，因此，当$\alpha\rightarrow0$时
$$
\begin{align} 
&x(t)=1 \\[0.45cm]
&X(j\omega)= 
\begin{cases} 
\infty & \text{if } \omega=0 \\
 0 & \text{if } \omega \ne0 
 \end{cases} \end{align}
$$

可知当$\alpha\rightarrow0$时，$X(j \omega)$为$\omega$的冲激函数，其在定义域上的积分为

$$
\begin{align} 
{\int_{-\infty}^{+\infty}} \lim_{\alpha \rightarrow 0}X(j \omega) d \omega 
&=\lim_{\alpha \rightarrow 0}{\int_{-\infty}^{+\infty}}\frac{2\alpha}{\alpha^2+\omega^2}d\omega \\[0.45cm]
&=\lim_{\alpha \rightarrow 0}{\int_{-\infty}^{+\infty}}\frac{2}{1+{(\frac{\omega}{\alpha})}^2}d(\frac{\omega}{\alpha}) \\[0.45cm]
&=\lim_{\alpha \rightarrow 0}2\arctan(\frac{\omega}{\alpha})\bigg|_{-\infty}^{+\infty} \\[0.45cm]
&=2\pi \\[0.45cm]
\end{align}
$$

因此，当$\alpha\rightarrow0$时，$X(j \omega) = 2 \pi \delta (\omega)$，即$x(t) = 1$的傅里叶变换为
$$
x(t) = 1 \longleftrightarrow X(j \omega) = 2 \pi \delta (\omega)
$$


]]></content>
      <categories>
        <category>博客</category>
        <category>通信</category>
      </categories>
      <tags>
        <tag>傅里叶变换</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2018/09/09/blog/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="简历投递情况"><a href="#简历投递情况" class="headerlink" title="简历投递情况"></a>简历投递情况</h2><h4 id="国家电网-南瑞集团"><a href="#国家电网-南瑞集团" class="headerlink" title="国家电网-南瑞集团"></a>国家电网-南瑞集团</h4><p>投递链接：<a href="https://job.sgepri.sgcc.com.cn/nari-career-ui/homepage">https://job.sgepri.sgcc.com.cn/nari-career-ui/homepage</a><br>岗位：硬件研发(平台及基础软硬件)<br>城市：武汉<br>状态：已测评</p>
<h4 id="中国船舶集团有限公司第七一〇研究所"><a href="#中国船舶集团有限公司第七一〇研究所" class="headerlink" title="中国船舶集团有限公司第七一〇研究所"></a>中国船舶集团有限公司第七一〇研究所</h4><p>投递链接：应届生<br>岗位：DSP工程师（武汉）、嵌入式硬件开发（武汉）、通信工程师（地点 武汉）<br>城市：武汉<br>状态：已投递（转邮件投递）</p>
<h4 id="京东方"><a href="#京东方" class="headerlink" title="京东方"></a>京东方</h4><p>投递链接：<a href="http://campus.boe.com/">http://campus.boe.com/</a><br>岗位：【显示器件】品质管理工程师（武汉）（J40388）<br>城市：武汉<br>状态：已测评</p>
<h4 id="上海晶丰明源半导体股份有限公司"><a href="#上海晶丰明源半导体股份有限公司" class="headerlink" title="上海晶丰明源半导体股份有限公司"></a>上海晶丰明源半导体股份有限公司</h4><p>投递链接：应届生<br>岗位：MCU硬件工程师<br>城市：杭州<br>状态：已投递</p>
<h4 id="台达电子企业管理（上海）有限公司"><a href="#台达电子企业管理（上海）有限公司" class="headerlink" title="台达电子企业管理（上海）有限公司"></a>台达电子企业管理（上海）有限公司</h4><p>投递链接：应届生<br>岗位：电源嵌入式软件工程师（杭州研发中心）、电源嵌入式软件工程师（杭州研发中心）<br>城市：武汉、杭州<br>状态：已投递</p>
<h4 id="中达电子-江苏-有限公司"><a href="#中达电子-江苏-有限公司" class="headerlink" title="中达电子(江苏)有限公司"></a>中达电子(江苏)有限公司</h4><p>投递链接：应届生<br>岗位：物联网软件工程师<br>城市：苏州<br>状态：已投递</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>测试</category>
      </categories>
      <tags>
        <tag>t</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask应用部署</title>
    <url>/2019/08/04/note/Flask%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p style="display:none">
服务器：阿里云云翼计划轻量应用服务器，1核2G，40G硬盘<br>系统：CentOS7.3<br>环境：Python3.7+MySQL+Gunicorn+Nginx+Supervisor
</p>



	<div class="row">
    <embed src="/note_pdf/Flask应用部署.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>Web学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>K-means算法的改进</title>
    <url>/2019/12/23/note/K-means%E7%AE%97%E6%B3%95%E7%9A%84%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<p style="display:none">
K-means算法由于其简单方便的特性成为最常用的聚类算法之一。但是K-means算法也存在着一些缺点，比如需要指定K值、结果对初始聚类中心非常敏感。目前，很多研究者对K-means算法的缺陷提出了改进的方案，改进的方向主要分为两大类：一是如何选取好的初始聚类中心；二是如何确定合适的K值。
</p>



	<div class="row">
    <embed src="/note_pdf/K-means算法的改进.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
        <tag>K-means</tag>
      </tags>
  </entry>
  <entry>
    <title>SS-TWR与DS-TWR</title>
    <url>/2022/12/01/note/SS-TWR%E4%B8%8EDS-TWR/</url>
    <content><![CDATA[<p style="display:none">
在UWB 测距方法中，基于信号飞行时间TOF（time of light）技术所用的到方法有单边双向测距法SS-TWR（Single-sided Two-way Ranging）和双边双向测距法DS-TWR（Double-sided Two-way Ranging）。



	<div class="row">
    <embed src="/note_pdf/SS-TWR与DS-TWR.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>UWB定位</category>
      </categories>
      <tags>
        <tag>UWB</tag>
      </tags>
  </entry>
  <entry>
    <title>两种图像分割方法</title>
    <url>/2019/11/21/note/%E4%B8%A4%E7%A7%8D%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p style="display:none">
内容：图像分割<br>1、分水岭算法分割图像（I1.tif，I2.tif）；<br>2、 区域生长法分割图像（coins.png，鼠标选取种子点[x_ceed, y_ceed] = grtpts）。
</p>



	<div class="row">
    <embed src="/note_pdf/两种图像分割方法.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>LSB算法</title>
    <url>/2019/09/28/note/LSB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p style="display:none">
近期老师布置了一项作业，让我们探索LSB及其改进算法，查了一点资料，做个笔记记一下。作者能力非常有限，此笔记仅供自己参考。首先说一下LSB算法，Least Significant Bits，将秘密信息嵌入到载体图像像素值的最低有效位，也称最不显著，改变这一位置对载体图像的品质影响最小。
</p>



	<div class="row">
    <embed src="/note_pdf/LSB算法.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>图像分割：阈值分割</title>
    <url>/2019/10/30/note/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%EF%BC%9A%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2/</url>
    <content><![CDATA[<p style="display:none">
阈值分割是一种基于区域的图像分割技术，原理是通过设定不同的特征阈值，把图像像素点分成若干类。阈值分割是一种传统的最常用的图像分割方法，因其实现简单、计算量小、性能稳定而成为图像分割技术中最基本和应用最广泛的分割技术。特别适用于目标和背景占据不同灰度级范围的图像。基于灰度阈值的分割方法，关键是如何合理地选择阈值。
</p>



	<div class="row">
    <embed src="/note_pdf/图像分割_阈值分割.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>图像增强：局部平均法</title>
    <url>/2019/10/15/note/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%9A%E5%B1%80%E9%83%A8%E5%B9%B3%E5%9D%87%E6%B3%95/</url>
    <content><![CDATA[<p style="display:none">
局部平均法也称均值滤波，是一种直接在空间域上进行平滑处理的方法。假设图像是由许多灰度恒定的小块组成，相邻像素间存在很高的空间相关性，而噪声则是统计独立的。因此，可用邻域内各像素的灰度平均值代替该像素原来的灰度值，实现图像的平滑。
</p>



	<div class="row">
    <embed src="/note_pdf/图像增强_局部平均法.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>图像基本运算：几何变换</title>
    <url>/2019/11/09/note/%E5%9B%BE%E5%83%8F%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%EF%BC%9A%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<p style="display:none">
图像的几何变换包括图像的镜像、缩放以及旋转，以下重点介绍图像的缩放和旋转。<br>（1）图像缩放分为比例缩放和非比例缩放，比例缩放指在x方向和y方向按相同的比例缩放，否则为非比例缩放。
</p>



	<div class="row">
    <embed src="/note_pdf/图像基本运算_几何变换.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>图像复原基本算法</title>
    <url>/2019/11/18/note/%E5%9B%BE%E5%83%8F%E5%A4%8D%E5%8E%9F%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p style="display:none">
对lena图像分别加入高斯噪声、椒盐噪声以及运动模糊，并分别利用均值去噪、中值去噪、逆滤波以及维纳滤波对图像进行复原， 观察结果并使用PSNR和SSIM进行评价。
</p>



	<div class="row">
    <embed src="/note_pdf/图像复原基本算法.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>图像增强：直方图均衡化</title>
    <url>/2019/10/15/note/%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%9A%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96/</url>
    <content><![CDATA[<p style="display:none">
图像直方图描述图像中各灰度级出现的相对频率，基于直方图的灰度变换，可调整图像直方图到一个预定的形状。例如，一些图像由于其灰度分布集中在较窄的区间，对比度很弱，图像细节看不清楚。此时，可采用图像灰度直方图均衡化处理，使得图像的灰度分布趋向均匀，图像所占有的像素灰度间距拉开，进而加大图像反差，改善视觉效果，达到增强的目的。从人眼视觉特性来考虑，一幅图像的直方图如果是均匀分布的，该图像色调给人的感觉会比较协调。
</p>



	<div class="row">
    <embed src="/note_pdf/图像增强_直方图均衡化.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>图像复原：带阻滤波器</title>
    <url>/2019/10/20/note/%E5%9B%BE%E5%83%8F%E5%A4%8D%E5%8E%9F%EF%BC%9A%E5%B8%A6%E9%98%BB%E6%BB%A4%E6%B3%A2%E5%99%A8/</url>
    <content><![CDATA[<p style="display:none">
带阻滤波器常用于处理含有周期性噪声的图像。周期性噪声可能由于多种因素引入，如图像获取系统中的电子元件等。
</p>



	<div class="row">
    <embed src="/note_pdf/图像复原_带阻滤波器.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>图像空域滤波</title>
    <url>/2019/11/20/note/%E5%9B%BE%E5%83%8F%E7%A9%BA%E5%9F%9F%E6%BB%A4%E6%B3%A2/</url>
    <content><![CDATA[<p style="display:none">
内容：图像的空域滤波<br>1、对图像进行平滑去噪（至少两种噪声，两种滤波器模板）<br>2、对图像进行锐化突出边缘等细节（至少两种边缘检测模板）
</p>



	<div class="row">
    <embed src="/note_pdf/图像空域滤波.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>小喇叭唱歌实验</title>
    <url>/2020/05/04/note/%E5%B0%8F%E5%96%87%E5%8F%AD%E5%94%B1%E6%AD%8C%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p style="display:none">
 1. 试验描述：<br>本实验使用PA7控制无源蜂鸣器，翻转电平使蜂鸣器发声，改变翻转的频率使蜂鸣器发出不同音调的声音，并且通过延时控制节拍的时间。其中，通过定时器1设置不同的计数值，并且再溢出中断时翻转电平，从而使PA7的电平以不同的频率翻转。控制节拍时间的延时使用软延时。
</p>



	<div class="row">
    <embed src="/note_pdf/小喇叭唱歌实验.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>AVR</tag>
        <tag>Proteus</tag>
      </tags>
  </entry>
  <entry>
    <title>形态学图像处理：边界提取</title>
    <url>/2019/11/01/note/%E5%BD%A2%E6%80%81%E5%AD%A6%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%9A%E8%BE%B9%E7%95%8C%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<p style="display:none">
简介没啥说的，直接看原理吧<br>表示为𝛽(𝐴)的集合𝐴的边界可以通过先用𝐵对𝐴腐蚀，而后执行𝐴和腐蚀的结果之间的集合之差得到，即
</p>



	<div class="row">
    <embed src="/note_pdf/形态学图像处理_边界提取.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>数码管动态扫描显示</title>
    <url>/2020/04/16/note/%E6%95%B0%E7%A0%81%E7%AE%A1%E5%8A%A8%E6%80%81%E6%89%AB%E6%8F%8F%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p style="display:none">
1. 试验描述：<br>实验使用4个两位的数码管，PD口和PA口分别控制数码管段显示和位选，并且使用PNP三极管提高驱动能力。
</p>



	<div class="row">
    <embed src="/note_pdf/数码管动态扫描显示.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>AVR</tag>
        <tag>Proteus</tag>
      </tags>
  </entry>
  <entry>
    <title>最简单的八路跑马灯</title>
    <url>/2020/03/27/note/%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%AB%E8%B7%AF%E8%B7%91%E9%A9%AC%E7%81%AF/</url>
    <content><![CDATA[<p style="display:none">
1. 试验描述：<br>先通过对PA端口的8位从右向左依次置零，实现8路LED灯依次从上到下点亮，再从左向右把PA端口的8位置零控制8路LED灯依次从小到上点亮，构成跑马灯形式，以此掌握ATmega16单片机的 I\O 端口操作。
</p>



	<div class="row">
    <embed src="/note_pdf/最简单的八路跑马灯.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>AVR</tag>
        <tag>Proteus</tag>
      </tags>
  </entry>
  <entry>
    <title>步进电机试验</title>
    <url>/2020/05/08/note/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p style="display:none">
1.	试验描述：<br>继电器部分由1只PNP型三极管2N5401驱动5V继电器。在继电器没有动作时，继电器触点断开；在继电器动作时，继电器触点闭合。把继电器触点引出，即可控制外部的设备。本实验使用继电器来控制12V的小灯。
</p>



	<div class="row">
    <embed src="/note_pdf/步进电机试验.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>AVR</tag>
        <tag>Proteus</tag>
      </tags>
  </entry>
  <entry>
    <title>极大似然估计修正测距数据</title>
    <url>/2023/03/20/note/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%E4%BF%AE%E6%AD%A3%E6%B5%8B%E8%B7%9D%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p style="display:none">
在UWB 测距时，误差主要可分为两类：一类是由于多径、NLOS等引起的误差，这类误差通常大于0且与距离有关；另一类是由于测量噪声、设备时钟漂移等引起的误差，这类误差可近似为均值为0 的高斯分布。因此可使用极大似然估计对数据进行拟合，进而抵消一部分误差的影响。
</p>



	<div class="row">
    <embed src="/note_pdf/极大似然估计修正测距数据.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>UWB定位</category>
      </categories>
      <tags>
        <tag>UWB</tag>
        <tag>极大似然</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵按键识别</title>
    <url>/2020/04/28/note/%E7%9F%A9%E9%98%B5%E6%8C%89%E9%94%AE%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p style="display:none">
1. 试验描述：<br>74LS47是一个7段数码管的驱动芯片，通过它解码，可以直接把数字转化为数码管的显示数字，从而简化了程序，节约了单片机的IO开销。本实验使用单片机通过74LS47驱动一个7段数码管。
</p>



	<div class="row">
    <embed src="/note_pdf/矩阵按键识别.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>AVR</tag>
        <tag>Proteus</tag>
      </tags>
  </entry>
  <entry>
    <title>继电器控制</title>
    <url>/2020/04/02/note/%E7%BB%A7%E7%94%B5%E5%99%A8%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p style="display:none">
1. 试验描述：<br>继电器部分由1只PNP型三极管2N5401驱动5V继电器。在继电器没有动作时，继电器触点断开；在继电器动作时，继电器触点闭合。把继电器触点引出，即可控制外部的设备。本实验使用继电器来控制12V的小灯。
</p>



	<div class="row">
    <embed src="/note_pdf/继电器控制.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>AVR</tag>
        <tag>Proteus</tag>
      </tags>
  </entry>
  <entry>
    <title>端口按键判断</title>
    <url>/2020/04/20/note/%E7%AB%AF%E5%8F%A3%E6%8C%89%E9%94%AE%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<p style="display:none">
1. 试验描述<br>将8个按键从1~8进行编号，如果其中一个键按下，则在LED数码管上显示相应的键值。
</p>



	<div class="row">
    <embed src="/note_pdf/端口按键判断.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>AVR</tag>
        <tag>Proteus</tag>
      </tags>
  </entry>
  <entry>
    <title>静态数码管扫描</title>
    <url>/2020/04/10/note/%E9%9D%99%E6%80%81%E6%95%B0%E7%A0%81%E7%AE%A1%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<p style="display:none">
1. 试验描述：<br>74LS47是一个7段数码管的驱动芯片，通过它解码，可以直接把数字转化为数码管的显示数字，从而简化了程序，节约了单片机的IO开销。本实验使用单片机通过74LS47驱动一个7段数码管。
</p>



	<div class="row">
    <embed src="/note_pdf/静态数码管扫描.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>笔记</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>AVR</tag>
        <tag>Proteus</tag>
      </tags>
  </entry>
</search>
